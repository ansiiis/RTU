%% 2.
%% Merijumu datu apstrade
% Polinoma aproksimacija - ja par 2 punktiem lielaka par polinoma kartu,
% skatisim lekcija.
% 1.lab.d
diary lab1_diary.m
%doti merijumu dati, kurus noformesim ka vektorus
Um = [-1 0.3 1.5 2.5 3.2]
Im = [1.1 2.2 2.1 3.2 4.7]
%Grafiks
plot(Um,Im,'o-')
%Iznak lausta linija, kas mums neder, tapec meginasim izveidot matematisku
%2.kartas polinoms
%y = C(1)*x.^2+C(2)*x+C(3)
%Polinoma koeficentus atradis POLYFIT
%sintakse:
%C = polyfit(x,y,N)
%N-polinoma karta
%C = polyfit(Um,Im,2)
%Lai iegutu labu liniju
%noformešu vel vienu x
U = -1:0.01:3.2
%%tad rekinašu y ar sikaku soli
%grafiku zimesim
%merijumu dati ar "o"
%I=C(1)*U.^3+C(2)*U+C(3)
%pielaikotais polinoms ar liniju
%plot(Um,Im,'o',U,I)
%lai iegutu labakus rezultatus panemsim 3.kartas polinomu
C = polyfit(Um,Im,3)
I= C(1)*U.^3+C(2)*U.^2+C(3)*U+C(4)
plot(Um,Im,'o',U,I)

%% izmantosim PolYVAL funkciju
%Ja punktu skaits ir par vienu lielaks par polinoma pakapi, tad ir absoluti
%precizi INTERPOLACIJA
%polyfit = polynomial fitting rekina koeficentus
%polyval = polynomial values rekina vertibas
C = polyfit(Um,Im,10);
I = polyval(C,U);
plot(Um,Im,'o',U,I)

%% Ja sakariba ir lineara
C = polyfit(Um,Im,1);
I = polyval(C,U);
plot(Um,Im,'o',U,I)

%% Vairakas merijumu serijas
% Pienemsim, ka mainmam spriegumu, bet stravu mainam 5 reizes
Um = [-1 0.3 1.5 2.5 3.2];
Im = [1.1 2.2 2.1 3.2 4.7;
      0.9 1.8 2.6 3.3 4.5;
      1.0 2.0 2.4 3.4 4.3;
      0.8 2.1 2.5 3.5 4.4;
      1.0 2.1 2.3 3.4 4.6];
% Ka matlab zimes matricas?
%figure,plot(Um,Im,'o-')
%pareizi butu transponet
%figure,plot(Um,Im','o-')
%secinam, ka matlab zime pa stabiniem
%lai polyfit varetu aprekinat vajag videjo
Ivid=mean(Im)
C = polyfit(Um,Ivid,4);
U = -1:0.01:3.2;
I = polyval(C,U);
%uzzimesim
%ar aplišiem apzimeejam merijumu datus
%ar melnam zvaigznem videjo
%ar liniju apzimejam pielaikojot polinomo
plot(Um,Im','o',Um,Ivid,'*k',U,I,'-')

%% Ka attelot videjo kvadratisko nozimi

Ivid_kv_nov = std(Im);
errorbar(Um,Ivid,Ivid_kv_nov)

%% Datu iegušana no grafiski uzdotiem datiem
%Pienemsim, ka mums ir grafika foto
%1.Ielasam JPG uz matlab
A = imread('image1.JPG');
B = imread('image2.JPG');
%2.Uzzimesim
%figure(1),image(A);
%figure(2),image(B);
figure(2),image([0 14],[80 0],B);
set(gca,'YDir','normal');
[x,y] = ginput(8)

% 3.
%% Simbolisko mainigo definešana ar vairakiem mainigajiem
syms a1 b1 c1 d1 a2 b2 c2 d2;

A = [a1, b1
     c1, d1];
B = [a2, b2,
     c2, d2];
 A.*B
 
 syms a b c d real %mainigie ir isti
 
%% Simbolisko mainigo definešana
x = sym('x');
sqrt(x^2)

x = sym('x','positive')

sqrt(x^2)

%% Simbolisko matricu definešana
A = sym('A',[2 2])
B = sym('B%d%d',[2 2])

%% Simboliskas konstantes 
delta = sym('1/10')

gamma = sym(1/10,'f')

omega = sym(1/10,'e')
% piemers ar simb. konstantem

A = hilb(3)
sym(A)

%% Atvasinašana
syms x y
diff(x^2)

% Parciali
z = x^2+y^3
diff(z,y)

% Dauzkartigi atvasinajumi
diff(z,x,2)
diff(diff(z,x,2),y,2)

%% Integrešana
% Nenoteiktais
syms x y
int(x^3)
z = x^6+y^5
int(z,x)
% Noteiktais
sym x
y = x
int(y,x,0,5)

%% Robežas
syms x 
limit(1/(x-1),x,1,'right')

%% Nelinearu vienadojumu risinajums
% (x-2)(x-3) = 0 
% x^2 -5x +6 = 0
syms x 
solve(x^2-5*x+6,x)

%% Izteiksmju vienkaršojumi
syms x 
y = sin(x)^2+cos(x)^2
simplify(y)
% citi vienkaršojumu veidi
f = (x-1)*(x-2)*(x-5)
expand(f) % atver iekavas
factor(f)

syms x 
h = x^5+x^4+x^3+x^2+x
horner(h)

% substitucijas
syms x y 
z = x^2+y^3
subs(z,y,5*x)

%% Rezultatu grafiska attelošana
syms x 
y = x^3-6*x^2+11*x-6
ezplot(y,[-4 4])

%% Skaistaka formulu attelošana
syms x 
 y = (x-1)*(x-2)^2/((x-3)*(x-6))
 pretty(y)
%% Skaistaka formulu attelošana - (2)
y2 = latex(y)
y3 = ['$',y2,'$'];
text(0,0.5,y3,'Interpreter','latex','FontSize',32)

%% Ka attelot formulu (ar vienkaršu plot)
% 1. dots
syms x
y = (x-1)*(x-2)/((x-3)*(x-4))
% 2. jatrod atvasinajums
y_atv=diff(y)
y_atv = simplify(y_atv)
% 3. liksim x - skaitlu vektoru
x = [-1:0.01:1];
% 4. javeic izteiksmju vektorizacija
% liekam punktinus vai...
y_vect = vectorize(y)
y_atv_vect = vectorize(y_atv)
% 5. jaliek x iekša ka skaitlu vektors
% copy paste
%y_num = %šeit iekope funkciju
% izmantot eval interpretatoru
y_num = eval(y_vect);
y_atv_num = eval(y_atv_vect);
% 6. zimesim plot funkciju
plot(x,y_num,x,y_atv_num)
% anotacija katrai liknei
y_ltx = latex(y);
y_atv_ltx = latex(y_atv);
h = legend(['$',y_ltx,'$'],['$',y_atv_ltx,'$'])
set(h,'Interpreter','latex')

4.fun
%% Gabalveida signala montaža
function y = macibu_stunda_4_fun(t)
%t = 0:0.01:8;
%t_zero = 0:0.01:1;
t_zero_f = (t>=0)&(t<1);
t_zero = t(t_zero_f);
%t_sin = 1:0.01:2.5;
t_sin_f = (t>=1)&(t<2.5);
t_sin = t(t_sin_f);
%t_noise = 2.5:0.01:4.5;
t_noise_f = (t>=2.5)&(t<4.5);
t_noise = t(t_noise_f);
%t_const = 4.5:0.01:6.5;
t_const_f = (t>=4.5)&(t<6.5);
t_const = t(t_const_f);
%t_saw = 6.5:0.01:8;
t_saw_f = (t>=6.5)&(t<=8);
t_saw = t(t_saw_f);
%% Sinusida funkcija
% y_sin = A0+A*sin(2*pi*f*(t-delay))
A0 = 0; A = 2.5; T = (2.5-1)/3.5; f = 1/T; delay = 1;
y_sin = A0+A*sin(2*pi*f*(t_sin-delay));
%plot(t_sin,y_sin)
%% Lineari mainigs signals

% y_saw = k*t(t_saw-delay)
yA = 2.5; yB = -2.5; tA = 6.5; tB = 8; delay = 7.25;
 k = (yA-yB)/(tA-tB);  %liknes slipuma koeficents
% delay - lai noteiktu delayr ir jaskatas krustpunkts ar t asi (y=0)
y_saw = k*(t_saw-delay);
%plot(t_saw,y_saw)
%% Konstantes signals

%y_const = zeroes(1,1) + 2.5;
%y_const = ones(1,1)*2.5;
% nav korekti, ja t_const izmainas, tad y_const nemainisies
y_const = zeros(size(t_const))+2.5;
%plot(t_const,y_const)
%% Nullu signals

y_zero = zeros(size(t_zero));
%plot(t_zero,y_zero)
%% trokšna signals

y_noise = rand(size(t_noise)) * 3 - 1.5;
%plot(t_noise,y_noise)
%% Signalu apvienošana
y = [y_zero, y_sin, y_noise, y_const, y_saw];
%plot(t,y)
%%

% 5. 
%%
R1=1;R2=2;R3=3;R4=4;R5=5;R6=6;R7=7; E1=1;E2=2;E3=3;

R= [R1+R2+R3 -R2 0;-R2 R2+R4+R5 -R5;0 -R5 R5+R6+R7];
E = [E1;-E2;-E3];
Ik = R\E;

%% Laika mainigie signali
t = 0:0.01:1;
R1=1;R2=2;R3=3;R4=4;R5=5;R6=6;R7=7; E1=1;E2=2;E3=3;
R= [R1+R2+R3 -R2 0;-R2 R2+R4+R5 -R5;0 -R5 R5+R6+R7];
E1 = 2*cos(2*pi*2*t);
E2 = 5*ones(size(t));
E3 = 3*sin(2*pi*3*t);
E = [E1;-E2;-E3];
% risinasim vienadojumu
Ik = R\E;
% atrast un uzzimet IR6
IR6 = Ik(3,:);
plot(t,IR6)
hold on
%UR6
UR6 = R6*IR6;
plot(t,UR6)
P6 = IR6.^2*R6;
plot(t,P6)

%% Ka parbaudit rezultatus
% kirhova sprieguma likums
%UR6+UR7+UR5=-E3
IR5 = Ik(3,:)-Ik(2,:);
IR7 = Ik(3,:);
UR5 = IR5*R5;
UR7 = IR7*R7;
Utst = UR6+UR7+UR5+E3;
plot(t,Utst)
